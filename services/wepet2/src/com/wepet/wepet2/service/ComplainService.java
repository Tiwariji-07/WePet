/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet2.Complain;

/**
 * Service object for domain model class {@link Complain}.
 */
public interface ComplainService {

    /**
     * Creates a new Complain. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Complain if any.
     *
     * @param complain Details of the Complain to be created; value cannot be null.
     * @return The newly created Complain.
     */
    Complain create(@Valid Complain complain);


	/**
     * Returns Complain by given id if exists.
     *
     * @param complainId The id of the Complain to get; value cannot be null.
     * @return Complain associated with the given complainId.
	 * @throws EntityNotFoundException If no Complain is found.
     */
    Complain getById(Integer complainId);

    /**
     * Find and return the Complain by given id if exists, returns null otherwise.
     *
     * @param complainId The id of the Complain to get; value cannot be null.
     * @return Complain associated with the given complainId.
     */
    Complain findById(Integer complainId);

	/**
     * Find and return the list of Complains by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param complainIds The id's of the Complain to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Complains associated with the given complainIds.
     */
    List<Complain> findByMultipleIds(List<Integer> complainIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Complain. It replaces all fields of the existing Complain with the given complain.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Complain if any.
     *
     * @param complain The details of the Complain to be updated; value cannot be null.
     * @return The updated Complain.
     * @throws EntityNotFoundException if no Complain is found with given input.
     */
    Complain update(@Valid Complain complain);


    /**
     * Partially updates the details of an existing Complain. It updates only the
     * fields of the existing Complain which are passed in the complainPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Complain if any.
     *
     * @param complainId The id of the Complain to be deleted; value cannot be null.
     * @param complainPatch The partial data of Complain which is supposed to be updated; value cannot be null.
     * @return The updated Complain.
     * @throws EntityNotFoundException if no Complain is found with given input.
     */
    Complain partialUpdate(Integer complainId, Map<String, Object> complainPatch);

    /**
     * Deletes an existing Complain with the given id.
     *
     * @param complainId The id of the Complain to be deleted; value cannot be null.
     * @return The deleted Complain.
     * @throws EntityNotFoundException if no Complain found with the given id.
     */
    Complain delete(Integer complainId);

    /**
     * Deletes an existing Complain with the given object.
     *
     * @param complain The instance of the Complain to be deleted; value cannot be null.
     */
    void delete(Complain complain);

    /**
     * Find all Complains matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Complains.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Complain> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Complains matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Complains.
     *
     * @see Pageable
     * @see Page
     */
    Page<Complain> findAll(String query, Pageable pageable);

    /**
     * Exports all Complains matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Complains matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Complains in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Complain.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}