/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet2.Complain;
import com.wepet.wepet2.Service;


/**
 * ServiceImpl object for domain model class Service.
 *
 * @see Service
 */
@org.springframework.stereotype.Service("wepet2.ServiceService")
@Validated
@EntityService(entityClass = Service.class, serviceId = "wepet2")
public class ServiceServiceImpl implements ServiceService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ServiceServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("wepet2.ComplainService")
    private ComplainService complainService;

    @Autowired
    @Qualifier("wepet2.ServiceDao")
    private WMGenericDao<Service, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Service, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Service create(Service service) {
        LOGGER.debug("Creating a new Service with information: {}", service);

        Service serviceCreated = this.wmGenericDao.create(service);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(serviceCreated);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Service getById(Integer serviceId) {
        LOGGER.debug("Finding Service by id: {}", serviceId);
        return this.wmGenericDao.findById(serviceId);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Service findById(Integer serviceId) {
        LOGGER.debug("Finding Service by id: {}", serviceId);
        try {
            return this.wmGenericDao.findById(serviceId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Service found with id: {}", serviceId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public List<Service> findByMultipleIds(List<Integer> serviceIds, boolean orderedReturn) {
        LOGGER.debug("Finding Services by ids: {}", serviceIds);

        return this.wmGenericDao.findByMultipleIds(serviceIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepet2TransactionManager")
    @Override
    public Service update(Service service) {
        LOGGER.debug("Updating Service with information: {}", service);

        this.wmGenericDao.update(service);
        this.wmGenericDao.refresh(service);

        return service;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Service partialUpdate(Integer serviceId, Map<String, Object>servicePatch) {
        LOGGER.debug("Partially Updating the Service with id: {}", serviceId);

        Service service = getById(serviceId);

        try {
            ObjectReader serviceReader = this.objectMapper.reader().forType(Service.class).withValueToUpdate(service);
            service = serviceReader.readValue(this.objectMapper.writeValueAsString(servicePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", servicePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        service = update(service);

        return service;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Service delete(Integer serviceId) {
        LOGGER.debug("Deleting Service with id: {}", serviceId);
        Service deleted = this.wmGenericDao.findById(serviceId);
        if (deleted == null) {
            LOGGER.debug("No Service found with id: {}", serviceId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Service.class.getSimpleName(), serviceId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public void delete(Service service) {
        LOGGER.debug("Deleting Service with {}", service);
        this.wmGenericDao.delete(service);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Service> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Services");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Service> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Services");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet2 for table Service to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet2 for table Service to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Complain> findAssociatedComplains(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated complains");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("service.id = '" + id + "'");

        return complainService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ComplainService instance
     */
    protected void setComplainService(ComplainService service) {
        this.complainService = service;
    }

}