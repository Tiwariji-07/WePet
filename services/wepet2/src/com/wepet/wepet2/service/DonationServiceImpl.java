/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet2.Donation;


/**
 * ServiceImpl object for domain model class Donation.
 *
 * @see Donation
 */
@Service("wepet2.DonationService")
@Validated
@EntityService(entityClass = Donation.class, serviceId = "wepet2")
public class DonationServiceImpl implements DonationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DonationServiceImpl.class);


    @Autowired
    @Qualifier("wepet2.DonationDao")
    private WMGenericDao<Donation, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Donation, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Donation create(Donation donation) {
        LOGGER.debug("Creating a new Donation with information: {}", donation);

        Donation donationCreated = this.wmGenericDao.create(donation);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(donationCreated);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Donation getById(Integer donationId) {
        LOGGER.debug("Finding Donation by id: {}", donationId);
        return this.wmGenericDao.findById(donationId);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Donation findById(Integer donationId) {
        LOGGER.debug("Finding Donation by id: {}", donationId);
        try {
            return this.wmGenericDao.findById(donationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Donation found with id: {}", donationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public List<Donation> findByMultipleIds(List<Integer> donationIds, boolean orderedReturn) {
        LOGGER.debug("Finding Donations by ids: {}", donationIds);

        return this.wmGenericDao.findByMultipleIds(donationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepet2TransactionManager")
    @Override
    public Donation update(Donation donation) {
        LOGGER.debug("Updating Donation with information: {}", donation);

        this.wmGenericDao.update(donation);
        this.wmGenericDao.refresh(donation);

        return donation;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Donation partialUpdate(Integer donationId, Map<String, Object>donationPatch) {
        LOGGER.debug("Partially Updating the Donation with id: {}", donationId);

        Donation donation = getById(donationId);

        try {
            ObjectReader donationReader = this.objectMapper.reader().forType(Donation.class).withValueToUpdate(donation);
            donation = donationReader.readValue(this.objectMapper.writeValueAsString(donationPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", donationPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        donation = update(donation);

        return donation;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Donation delete(Integer donationId) {
        LOGGER.debug("Deleting Donation with id: {}", donationId);
        Donation deleted = this.wmGenericDao.findById(donationId);
        if (deleted == null) {
            LOGGER.debug("No Donation found with id: {}", donationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Donation.class.getSimpleName(), donationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public void delete(Donation donation) {
        LOGGER.debug("Deleting Donation with {}", donation);
        this.wmGenericDao.delete(donation);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Donation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Donations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Donation> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Donations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet2 for table Donation to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet2 for table Donation to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}