/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet2.Login;


/**
 * ServiceImpl object for domain model class Login.
 *
 * @see Login
 */
@Service("wepet2.LoginService")
@Validated
@EntityService(entityClass = Login.class, serviceId = "wepet2")
public class LoginServiceImpl implements LoginService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoginServiceImpl.class);


    @Autowired
    @Qualifier("wepet2.LoginDao")
    private WMGenericDao<Login, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Login, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Login create(Login login) {
        LOGGER.debug("Creating a new Login with information: {}", login);

        Login loginCreated = this.wmGenericDao.create(login);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(loginCreated);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Login getById(Integer loginId) {
        LOGGER.debug("Finding Login by id: {}", loginId);
        return this.wmGenericDao.findById(loginId);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Login findById(Integer loginId) {
        LOGGER.debug("Finding Login by id: {}", loginId);
        try {
            return this.wmGenericDao.findById(loginId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Login found with id: {}", loginId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public List<Login> findByMultipleIds(List<Integer> loginIds, boolean orderedReturn) {
        LOGGER.debug("Finding Logins by ids: {}", loginIds);

        return this.wmGenericDao.findByMultipleIds(loginIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepet2TransactionManager")
    @Override
    public Login update(Login login) {
        LOGGER.debug("Updating Login with information: {}", login);

        this.wmGenericDao.update(login);
        this.wmGenericDao.refresh(login);

        return login;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Login partialUpdate(Integer loginId, Map<String, Object>loginPatch) {
        LOGGER.debug("Partially Updating the Login with id: {}", loginId);

        Login login = getById(loginId);

        try {
            ObjectReader loginReader = this.objectMapper.reader().forType(Login.class).withValueToUpdate(login);
            login = loginReader.readValue(this.objectMapper.writeValueAsString(loginPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", loginPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        login = update(login);

        return login;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Login delete(Integer loginId) {
        LOGGER.debug("Deleting Login with id: {}", loginId);
        Login deleted = this.wmGenericDao.findById(loginId);
        if (deleted == null) {
            LOGGER.debug("No Login found with id: {}", loginId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Login.class.getSimpleName(), loginId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public void delete(Login login) {
        LOGGER.debug("Deleting Login with {}", login);
        this.wmGenericDao.delete(login);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Login> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Logins");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Login> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Logins");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet2 for table Login to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet2 for table Login to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}