/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet2.Volunteer;


/**
 * ServiceImpl object for domain model class Volunteer.
 *
 * @see Volunteer
 */
@Service("wepet2.VolunteerService")
@Validated
@EntityService(entityClass = Volunteer.class, serviceId = "wepet2")
public class VolunteerServiceImpl implements VolunteerService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VolunteerServiceImpl.class);


    @Autowired
    @Qualifier("wepet2.VolunteerDao")
    private WMGenericDao<Volunteer, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Volunteer, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Volunteer create(Volunteer volunteer) {
        LOGGER.debug("Creating a new Volunteer with information: {}", volunteer);

        Volunteer volunteerCreated = this.wmGenericDao.create(volunteer);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(volunteerCreated);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Volunteer getById(Integer volunteerId) {
        LOGGER.debug("Finding Volunteer by id: {}", volunteerId);
        return this.wmGenericDao.findById(volunteerId);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Volunteer findById(Integer volunteerId) {
        LOGGER.debug("Finding Volunteer by id: {}", volunteerId);
        try {
            return this.wmGenericDao.findById(volunteerId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Volunteer found with id: {}", volunteerId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public List<Volunteer> findByMultipleIds(List<Integer> volunteerIds, boolean orderedReturn) {
        LOGGER.debug("Finding Volunteers by ids: {}", volunteerIds);

        return this.wmGenericDao.findByMultipleIds(volunteerIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepet2TransactionManager")
    @Override
    public Volunteer update(Volunteer volunteer) {
        LOGGER.debug("Updating Volunteer with information: {}", volunteer);

        this.wmGenericDao.update(volunteer);
        this.wmGenericDao.refresh(volunteer);

        return volunteer;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Volunteer partialUpdate(Integer volunteerId, Map<String, Object>volunteerPatch) {
        LOGGER.debug("Partially Updating the Volunteer with id: {}", volunteerId);

        Volunteer volunteer = getById(volunteerId);

        try {
            ObjectReader volunteerReader = this.objectMapper.reader().forType(Volunteer.class).withValueToUpdate(volunteer);
            volunteer = volunteerReader.readValue(this.objectMapper.writeValueAsString(volunteerPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", volunteerPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        volunteer = update(volunteer);

        return volunteer;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Volunteer delete(Integer volunteerId) {
        LOGGER.debug("Deleting Volunteer with id: {}", volunteerId);
        Volunteer deleted = this.wmGenericDao.findById(volunteerId);
        if (deleted == null) {
            LOGGER.debug("No Volunteer found with id: {}", volunteerId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Volunteer.class.getSimpleName(), volunteerId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public void delete(Volunteer volunteer) {
        LOGGER.debug("Deleting Volunteer with {}", volunteer);
        this.wmGenericDao.delete(volunteer);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Volunteer> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Volunteers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Volunteer> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Volunteers");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet2 for table Volunteer to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet2 for table Volunteer to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}