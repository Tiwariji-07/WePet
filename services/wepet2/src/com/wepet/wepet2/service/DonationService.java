/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet2.Donation;

/**
 * Service object for domain model class {@link Donation}.
 */
public interface DonationService {

    /**
     * Creates a new Donation. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Donation if any.
     *
     * @param donation Details of the Donation to be created; value cannot be null.
     * @return The newly created Donation.
     */
    Donation create(@Valid Donation donation);


	/**
     * Returns Donation by given id if exists.
     *
     * @param donationId The id of the Donation to get; value cannot be null.
     * @return Donation associated with the given donationId.
	 * @throws EntityNotFoundException If no Donation is found.
     */
    Donation getById(Integer donationId);

    /**
     * Find and return the Donation by given id if exists, returns null otherwise.
     *
     * @param donationId The id of the Donation to get; value cannot be null.
     * @return Donation associated with the given donationId.
     */
    Donation findById(Integer donationId);

	/**
     * Find and return the list of Donations by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param donationIds The id's of the Donation to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Donations associated with the given donationIds.
     */
    List<Donation> findByMultipleIds(List<Integer> donationIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Donation. It replaces all fields of the existing Donation with the given donation.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Donation if any.
     *
     * @param donation The details of the Donation to be updated; value cannot be null.
     * @return The updated Donation.
     * @throws EntityNotFoundException if no Donation is found with given input.
     */
    Donation update(@Valid Donation donation);


    /**
     * Partially updates the details of an existing Donation. It updates only the
     * fields of the existing Donation which are passed in the donationPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Donation if any.
     *
     * @param donationId The id of the Donation to be deleted; value cannot be null.
     * @param donationPatch The partial data of Donation which is supposed to be updated; value cannot be null.
     * @return The updated Donation.
     * @throws EntityNotFoundException if no Donation is found with given input.
     */
    Donation partialUpdate(Integer donationId, Map<String, Object> donationPatch);

    /**
     * Deletes an existing Donation with the given id.
     *
     * @param donationId The id of the Donation to be deleted; value cannot be null.
     * @return The deleted Donation.
     * @throws EntityNotFoundException if no Donation found with the given id.
     */
    Donation delete(Integer donationId);

    /**
     * Deletes an existing Donation with the given object.
     *
     * @param donation The instance of the Donation to be deleted; value cannot be null.
     */
    void delete(Donation donation);

    /**
     * Find all Donations matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Donations.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Donation> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Donations matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Donations.
     *
     * @see Pageable
     * @see Page
     */
    Page<Donation> findAll(String query, Pageable pageable);

    /**
     * Exports all Donations matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Donations matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Donations in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Donation.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}