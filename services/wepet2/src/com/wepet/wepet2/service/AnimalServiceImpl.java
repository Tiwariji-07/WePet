/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet2.Adoption;
import com.wepet.wepet2.Animal;


/**
 * ServiceImpl object for domain model class Animal.
 *
 * @see Animal
 */
@Service("wepet2.AnimalService")
@Validated
@EntityService(entityClass = Animal.class, serviceId = "wepet2")
public class AnimalServiceImpl implements AnimalService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnimalServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("wepet2.AdoptionService")
    private AdoptionService adoptionService;

    @Autowired
    @Qualifier("wepet2.AnimalDao")
    private WMGenericDao<Animal, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Animal, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Animal create(Animal animal) {
        LOGGER.debug("Creating a new Animal with information: {}", animal);

        Animal animalCreated = this.wmGenericDao.create(animal);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(animalCreated);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Animal getById(Integer animalId) {
        LOGGER.debug("Finding Animal by id: {}", animalId);
        return this.wmGenericDao.findById(animalId);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Animal findById(Integer animalId) {
        LOGGER.debug("Finding Animal by id: {}", animalId);
        try {
            return this.wmGenericDao.findById(animalId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Animal found with id: {}", animalId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public List<Animal> findByMultipleIds(List<Integer> animalIds, boolean orderedReturn) {
        LOGGER.debug("Finding Animals by ids: {}", animalIds);

        return this.wmGenericDao.findByMultipleIds(animalIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepet2TransactionManager")
    @Override
    public Animal update(Animal animal) {
        LOGGER.debug("Updating Animal with information: {}", animal);

        this.wmGenericDao.update(animal);
        this.wmGenericDao.refresh(animal);

        return animal;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Animal partialUpdate(Integer animalId, Map<String, Object>animalPatch) {
        LOGGER.debug("Partially Updating the Animal with id: {}", animalId);

        Animal animal = getById(animalId);

        try {
            ObjectReader animalReader = this.objectMapper.reader().forType(Animal.class).withValueToUpdate(animal);
            animal = animalReader.readValue(this.objectMapper.writeValueAsString(animalPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", animalPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        animal = update(animal);

        return animal;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public Animal delete(Integer animalId) {
        LOGGER.debug("Deleting Animal with id: {}", animalId);
        Animal deleted = this.wmGenericDao.findById(animalId);
        if (deleted == null) {
            LOGGER.debug("No Animal found with id: {}", animalId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Animal.class.getSimpleName(), animalId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepet2TransactionManager")
    @Override
    public void delete(Animal animal) {
        LOGGER.debug("Deleting Animal with {}", animal);
        this.wmGenericDao.delete(animal);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Animal> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Animals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Animal> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Animals");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet2 for table Animal to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet2 for table Animal to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "wepet2TransactionManager")
    @Override
    public Page<Adoption> findAssociatedAdoptions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated adoptions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("animal.id = '" + id + "'");

        return adoptionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AdoptionService instance
     */
    protected void setAdoptionService(AdoptionService service) {
        this.adoptionService = service;
    }

}