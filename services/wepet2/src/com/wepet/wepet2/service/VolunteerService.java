/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet2.Volunteer;

/**
 * Service object for domain model class {@link Volunteer}.
 */
public interface VolunteerService {

    /**
     * Creates a new Volunteer. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Volunteer if any.
     *
     * @param volunteer Details of the Volunteer to be created; value cannot be null.
     * @return The newly created Volunteer.
     */
    Volunteer create(@Valid Volunteer volunteer);


	/**
     * Returns Volunteer by given id if exists.
     *
     * @param volunteerId The id of the Volunteer to get; value cannot be null.
     * @return Volunteer associated with the given volunteerId.
	 * @throws EntityNotFoundException If no Volunteer is found.
     */
    Volunteer getById(Integer volunteerId);

    /**
     * Find and return the Volunteer by given id if exists, returns null otherwise.
     *
     * @param volunteerId The id of the Volunteer to get; value cannot be null.
     * @return Volunteer associated with the given volunteerId.
     */
    Volunteer findById(Integer volunteerId);

	/**
     * Find and return the list of Volunteers by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param volunteerIds The id's of the Volunteer to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Volunteers associated with the given volunteerIds.
     */
    List<Volunteer> findByMultipleIds(List<Integer> volunteerIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Volunteer. It replaces all fields of the existing Volunteer with the given volunteer.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Volunteer if any.
     *
     * @param volunteer The details of the Volunteer to be updated; value cannot be null.
     * @return The updated Volunteer.
     * @throws EntityNotFoundException if no Volunteer is found with given input.
     */
    Volunteer update(@Valid Volunteer volunteer);


    /**
     * Partially updates the details of an existing Volunteer. It updates only the
     * fields of the existing Volunteer which are passed in the volunteerPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Volunteer if any.
     *
     * @param volunteerId The id of the Volunteer to be deleted; value cannot be null.
     * @param volunteerPatch The partial data of Volunteer which is supposed to be updated; value cannot be null.
     * @return The updated Volunteer.
     * @throws EntityNotFoundException if no Volunteer is found with given input.
     */
    Volunteer partialUpdate(Integer volunteerId, Map<String, Object> volunteerPatch);

    /**
     * Deletes an existing Volunteer with the given id.
     *
     * @param volunteerId The id of the Volunteer to be deleted; value cannot be null.
     * @return The deleted Volunteer.
     * @throws EntityNotFoundException if no Volunteer found with the given id.
     */
    Volunteer delete(Integer volunteerId);

    /**
     * Deletes an existing Volunteer with the given object.
     *
     * @param volunteer The instance of the Volunteer to be deleted; value cannot be null.
     */
    void delete(Volunteer volunteer);

    /**
     * Find all Volunteers matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Volunteers.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Volunteer> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Volunteers matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Volunteers.
     *
     * @see Pageable
     * @see Page
     */
    Page<Volunteer> findAll(String query, Pageable pageable);

    /**
     * Exports all Volunteers matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Volunteers matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Volunteers in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Volunteer.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}