/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wepet.wepet2.Volunteer;
import com.wepet.wepet2.service.VolunteerService;


/**
 * Controller object for domain model class Volunteer.
 * @see Volunteer
 */
@RestController("wepet2.VolunteerController")
@Api(value = "VolunteerController", description = "Exposes APIs to work with Volunteer resource.")
@RequestMapping("/wepet2/Volunteer")
public class VolunteerController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VolunteerController.class);

    @Autowired
	@Qualifier("wepet2.VolunteerService")
	private VolunteerService volunteerService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Volunteer instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Volunteer createVolunteer(@RequestBody Volunteer volunteer) {
		LOGGER.debug("Create Volunteer with information: {}" , volunteer);

		volunteer = volunteerService.create(volunteer);
		LOGGER.debug("Created Volunteer with information: {}" , volunteer);

	    return volunteer;
	}

    @ApiOperation(value = "Returns the Volunteer instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Volunteer getVolunteer(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Volunteer with id: {}" , id);

        Volunteer foundVolunteer = volunteerService.getById(id);
        LOGGER.debug("Volunteer details with id: {}" , foundVolunteer);

        return foundVolunteer;
    }

    @ApiOperation(value = "Updates the Volunteer instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Volunteer editVolunteer(@PathVariable("id") Integer id, @RequestBody Volunteer volunteer) {
        LOGGER.debug("Editing Volunteer with id: {}" , volunteer.getId());

        volunteer.setId(id);
        volunteer = volunteerService.update(volunteer);
        LOGGER.debug("Volunteer details with id: {}" , volunteer);

        return volunteer;
    }
    
    @ApiOperation(value = "Partially updates the Volunteer instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Volunteer patchVolunteer(@PathVariable("id") Integer id, @RequestBody @MapTo(Volunteer.class) Map<String, Object> volunteerPatch) {
        LOGGER.debug("Partially updating Volunteer with id: {}" , id);

        Volunteer volunteer = volunteerService.partialUpdate(id, volunteerPatch);
        LOGGER.debug("Volunteer details after partial update: {}" , volunteer);

        return volunteer;
    }

    @ApiOperation(value = "Deletes the Volunteer instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVolunteer(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Volunteer with id: {}" , id);

        Volunteer deletedVolunteer = volunteerService.delete(id);

        return deletedVolunteer != null;
    }

    /**
     * @deprecated Use {@link #findVolunteers(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Volunteer instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Volunteer> searchVolunteersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Volunteers list by query filter:{}", (Object) queryFilters);
        return volunteerService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Volunteer instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Volunteer> findVolunteers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Volunteers list by filter:", query);
        return volunteerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Volunteer instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Volunteer> filterVolunteers(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Volunteers list by filter", query);
        return volunteerService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVolunteers(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return volunteerService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportVolunteersAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Volunteer.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> volunteerService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Volunteer instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVolunteers( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Volunteers");
		return volunteerService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVolunteerAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return volunteerService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VolunteerService instance
	 */
	protected void setVolunteerService(VolunteerService service) {
		this.volunteerService = service;
	}

}