/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * Animal generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`animal`", uniqueConstraints = {
            @UniqueConstraint(name = "`size`", columnNames = {"`size`"}),
            @UniqueConstraint(name = "`age`", columnNames = {"`age`"})})
public class Animal implements Serializable {

    private Integer id;
    private String name;
    private String breed;
    private String size;
    private int age;
    private String description;
    private String gender;
    private int locationId;
    private Boolean isVaccinated;
    private int animalTypeId;
    private Location location;
    private AnimalType animalType;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`name`", nullable = false, length = 100)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @Column(name = "`breed`", nullable = true, length = 100)
    public String getBreed() {
        return this.breed;
    }

    public void setBreed(String breed) {
        this.breed = breed;
    }

    @Column(name = "`size`", nullable = false, length = 100)
    public String getSize() {
        return this.size;
    }

    public void setSize(String size) {
        this.size = size;
    }

    @Column(name = "`age`", nullable = false, scale = 0, precision = 10)
    public int getAge() {
        return this.age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    @Column(name = "`description`", nullable = false, length = 100)
    public String getDescription() {
        return this.description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @Column(name = "`gender`", nullable = false, length = 20)
    public String getGender() {
        return this.gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    @Column(name = "`location_id`", nullable = false, scale = 0, precision = 10)
    public int getLocationId() {
        return this.locationId;
    }

    public void setLocationId(int locationId) {
        this.locationId = locationId;
    }

    @Column(name = "`is_vaccinated`", nullable = true)
    public Boolean getIsVaccinated() {
        return this.isVaccinated;
    }

    public void setIsVaccinated(Boolean isVaccinated) {
        this.isVaccinated = isVaccinated;
    }

    @Column(name = "`animal_type_id`", nullable = false, scale = 0, precision = 10)
    public int getAnimalTypeId() {
        return this.animalTypeId;
    }

    public void setAnimalTypeId(int animalTypeId) {
        this.animalTypeId = animalTypeId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`location_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`animal_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Location getLocation() {
        return this.location;
    }

    public void setLocation(Location location) {
        if(location != null) {
            this.locationId = location.getId();
        }

        this.location = location;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`animal_type_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`animal_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public AnimalType getAnimalType() {
        return this.animalType;
    }

    public void setAnimalType(AnimalType animalType) {
        if(animalType != null) {
            this.animalTypeId = animalType.getId();
        }

        this.animalType = animalType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Animal)) return false;
        final Animal animal = (Animal) o;
        return Objects.equals(getId(), animal.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}