/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.Animal;
import com.wepet.wepet.Complain;
import com.wepet.wepet.Location;
import com.wepet.wepet.Organization;
import com.wepet.wepet.User;


/**
 * ServiceImpl object for domain model class Location.
 *
 * @see Location
 */
@Service("wepet.LocationService")
@Validated
@EntityService(entityClass = Location.class, serviceId = "wepet")
public class LocationServiceImpl implements LocationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(LocationServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("wepet.OrganizationService")
    private OrganizationService organizationService;

    @Lazy
    @Autowired
    @Qualifier("wepet.UserService")
    private UserService userService;

    @Lazy
    @Autowired
    @Qualifier("wepet.ComplainService")
    private ComplainService complainService;

    @Lazy
    @Autowired
    @Qualifier("wepet.AnimalService")
    private AnimalService animalService;

    @Autowired
    @Qualifier("wepet.LocationDao")
    private WMGenericDao<Location, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Location, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Location create(Location location) {
        LOGGER.debug("Creating a new Location with information: {}", location);

        Location locationCreated = this.wmGenericDao.create(location);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(locationCreated);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Location getById(Integer locationId) {
        LOGGER.debug("Finding Location by id: {}", locationId);
        return this.wmGenericDao.findById(locationId);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Location findById(Integer locationId) {
        LOGGER.debug("Finding Location by id: {}", locationId);
        try {
            return this.wmGenericDao.findById(locationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Location found with id: {}", locationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public List<Location> findByMultipleIds(List<Integer> locationIds, boolean orderedReturn) {
        LOGGER.debug("Finding Locations by ids: {}", locationIds);

        return this.wmGenericDao.findByMultipleIds(locationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepetTransactionManager")
    @Override
    public Location update(Location location) {
        LOGGER.debug("Updating Location with information: {}", location);

        this.wmGenericDao.update(location);
        this.wmGenericDao.refresh(location);

        return location;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Location partialUpdate(Integer locationId, Map<String, Object>locationPatch) {
        LOGGER.debug("Partially Updating the Location with id: {}", locationId);

        Location location = getById(locationId);

        try {
            ObjectReader locationReader = this.objectMapper.reader().forType(Location.class).withValueToUpdate(location);
            location = locationReader.readValue(this.objectMapper.writeValueAsString(locationPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", locationPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        location = update(location);

        return location;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Location delete(Integer locationId) {
        LOGGER.debug("Deleting Location with id: {}", locationId);
        Location deleted = this.wmGenericDao.findById(locationId);
        if (deleted == null) {
            LOGGER.debug("No Location found with id: {}", locationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Location.class.getSimpleName(), locationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public void delete(Location location) {
        LOGGER.debug("Deleting Location with {}", location);
        this.wmGenericDao.delete(location);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Location> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Locations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Location> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Locations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet for table Location to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet for table Location to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Animal> findAssociatedAnimals(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated animals");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("location.id = '" + id + "'");

        return animalService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Complain> findAssociatedComplains(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated complains");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("location.id = '" + id + "'");

        return complainService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Organization> findAssociatedOrganizations(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated organizations");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("location.id = '" + id + "'");

        return organizationService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<User> findAssociatedUsers(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated users");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("location.id = '" + id + "'");

        return userService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service OrganizationService instance
     */
    protected void setOrganizationService(OrganizationService service) {
        this.organizationService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service UserService instance
     */
    protected void setUserService(UserService service) {
        this.userService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ComplainService instance
     */
    protected void setComplainService(ComplainService service) {
        this.complainService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AnimalService instance
     */
    protected void setAnimalService(AnimalService service) {
        this.animalService = service;
    }

}