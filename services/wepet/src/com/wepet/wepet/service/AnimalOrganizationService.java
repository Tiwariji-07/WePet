/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.Adoption;
import com.wepet.wepet.AnimalOrganization;

/**
 * Service object for domain model class {@link AnimalOrganization}.
 */
public interface AnimalOrganizationService {

    /**
     * Creates a new AnimalOrganization. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AnimalOrganization if any.
     *
     * @param animalOrganization Details of the AnimalOrganization to be created; value cannot be null.
     * @return The newly created AnimalOrganization.
     */
    AnimalOrganization create(@Valid AnimalOrganization animalOrganization);


	/**
     * Returns AnimalOrganization by given id if exists.
     *
     * @param animalorganizationId The id of the AnimalOrganization to get; value cannot be null.
     * @return AnimalOrganization associated with the given animalorganizationId.
	 * @throws EntityNotFoundException If no AnimalOrganization is found.
     */
    AnimalOrganization getById(Integer animalorganizationId);

    /**
     * Find and return the AnimalOrganization by given id if exists, returns null otherwise.
     *
     * @param animalorganizationId The id of the AnimalOrganization to get; value cannot be null.
     * @return AnimalOrganization associated with the given animalorganizationId.
     */
    AnimalOrganization findById(Integer animalorganizationId);

	/**
     * Find and return the list of AnimalOrganizations by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param animalorganizationIds The id's of the AnimalOrganization to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AnimalOrganizations associated with the given animalorganizationIds.
     */
    List<AnimalOrganization> findByMultipleIds(List<Integer> animalorganizationIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AnimalOrganization. It replaces all fields of the existing AnimalOrganization with the given animalOrganization.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AnimalOrganization if any.
     *
     * @param animalOrganization The details of the AnimalOrganization to be updated; value cannot be null.
     * @return The updated AnimalOrganization.
     * @throws EntityNotFoundException if no AnimalOrganization is found with given input.
     */
    AnimalOrganization update(@Valid AnimalOrganization animalOrganization);


    /**
     * Partially updates the details of an existing AnimalOrganization. It updates only the
     * fields of the existing AnimalOrganization which are passed in the animalOrganizationPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AnimalOrganization if any.
     *
     * @param animalorganizationId The id of the AnimalOrganization to be deleted; value cannot be null.
     * @param animalOrganizationPatch The partial data of AnimalOrganization which is supposed to be updated; value cannot be null.
     * @return The updated AnimalOrganization.
     * @throws EntityNotFoundException if no AnimalOrganization is found with given input.
     */
    AnimalOrganization partialUpdate(Integer animalorganizationId, Map<String, Object> animalOrganizationPatch);

    /**
     * Deletes an existing AnimalOrganization with the given id.
     *
     * @param animalorganizationId The id of the AnimalOrganization to be deleted; value cannot be null.
     * @return The deleted AnimalOrganization.
     * @throws EntityNotFoundException if no AnimalOrganization found with the given id.
     */
    AnimalOrganization delete(Integer animalorganizationId);

    /**
     * Deletes an existing AnimalOrganization with the given object.
     *
     * @param animalOrganization The instance of the AnimalOrganization to be deleted; value cannot be null.
     */
    void delete(AnimalOrganization animalOrganization);

    /**
     * Find all AnimalOrganizations matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AnimalOrganizations.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AnimalOrganization> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AnimalOrganizations matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AnimalOrganizations.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnimalOrganization> findAll(String query, Pageable pageable);

    /**
     * Exports all AnimalOrganizations matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AnimalOrganizations matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AnimalOrganizations in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AnimalOrganization.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated adoptions for given AnimalOrganization id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Adoption instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Adoption> findAssociatedAdoptions(Integer id, Pageable pageable);

}