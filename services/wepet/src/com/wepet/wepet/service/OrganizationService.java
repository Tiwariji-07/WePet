/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.AnimalOrganization;
import com.wepet.wepet.Complain;
import com.wepet.wepet.Organization;

/**
 * Service object for domain model class {@link Organization}.
 */
public interface OrganizationService {

    /**
     * Creates a new Organization. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Organization if any.
     *
     * @param organization Details of the Organization to be created; value cannot be null.
     * @return The newly created Organization.
     */
    Organization create(@Valid Organization organization);


	/**
     * Returns Organization by given id if exists.
     *
     * @param organizationId The id of the Organization to get; value cannot be null.
     * @return Organization associated with the given organizationId.
	 * @throws EntityNotFoundException If no Organization is found.
     */
    Organization getById(Integer organizationId);

    /**
     * Find and return the Organization by given id if exists, returns null otherwise.
     *
     * @param organizationId The id of the Organization to get; value cannot be null.
     * @return Organization associated with the given organizationId.
     */
    Organization findById(Integer organizationId);

	/**
     * Find and return the list of Organizations by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param organizationIds The id's of the Organization to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Organizations associated with the given organizationIds.
     */
    List<Organization> findByMultipleIds(List<Integer> organizationIds, boolean orderedReturn);

    /**
     * Find and return the Organization for given email  if exists.
     *
     * @param email value of email; value cannot be null.
     * @return Organization associated with the given inputs.
     * @throws EntityNotFoundException if no matching Organization found.
     */
    Organization getByEmail(String email);

    /**
     * Find and return the Organization for given phoneNo  if exists.
     *
     * @param phoneNo value of phoneNo; value cannot be null.
     * @return Organization associated with the given inputs.
     * @throws EntityNotFoundException if no matching Organization found.
     */
    Organization getByPhoneNo(int phoneNo);

    /**
     * Updates the details of an existing Organization. It replaces all fields of the existing Organization with the given organization.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Organization if any.
     *
     * @param organization The details of the Organization to be updated; value cannot be null.
     * @return The updated Organization.
     * @throws EntityNotFoundException if no Organization is found with given input.
     */
    Organization update(@Valid Organization organization);


    /**
     * Partially updates the details of an existing Organization. It updates only the
     * fields of the existing Organization which are passed in the organizationPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Organization if any.
     *
     * @param organizationId The id of the Organization to be deleted; value cannot be null.
     * @param organizationPatch The partial data of Organization which is supposed to be updated; value cannot be null.
     * @return The updated Organization.
     * @throws EntityNotFoundException if no Organization is found with given input.
     */
    Organization partialUpdate(Integer organizationId, Map<String, Object> organizationPatch);

    /**
     * Deletes an existing Organization with the given id.
     *
     * @param organizationId The id of the Organization to be deleted; value cannot be null.
     * @return The deleted Organization.
     * @throws EntityNotFoundException if no Organization found with the given id.
     */
    Organization delete(Integer organizationId);

    /**
     * Deletes an existing Organization with the given object.
     *
     * @param organization The instance of the Organization to be deleted; value cannot be null.
     */
    void delete(Organization organization);

    /**
     * Find all Organizations matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Organizations.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Organization> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Organizations matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Organizations.
     *
     * @see Pageable
     * @see Page
     */
    Page<Organization> findAll(String query, Pageable pageable);

    /**
     * Exports all Organizations matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Organizations matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Organizations in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Organization.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated animalOrganizations for given Organization id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnimalOrganization instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnimalOrganization> findAssociatedAnimalOrganizations(Integer id, Pageable pageable);

    /*
     * Returns the associated complains for given Organization id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Complain instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Complain> findAssociatedComplains(Integer id, Pageable pageable);

}