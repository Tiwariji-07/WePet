/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.AnimalPicture;

/**
 * Service object for domain model class {@link AnimalPicture}.
 */
public interface AnimalPictureService {

    /**
     * Creates a new AnimalPicture. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AnimalPicture if any.
     *
     * @param animalPicture Details of the AnimalPicture to be created; value cannot be null.
     * @return The newly created AnimalPicture.
     */
    AnimalPicture create(@Valid AnimalPicture animalPicture);


	/**
     * Returns AnimalPicture by given id if exists.
     *
     * @param animalpictureId The id of the AnimalPicture to get; value cannot be null.
     * @return AnimalPicture associated with the given animalpictureId.
	 * @throws EntityNotFoundException If no AnimalPicture is found.
     */
    AnimalPicture getById(Integer animalpictureId);

    /**
     * Find and return the AnimalPicture by given id if exists, returns null otherwise.
     *
     * @param animalpictureId The id of the AnimalPicture to get; value cannot be null.
     * @return AnimalPicture associated with the given animalpictureId.
     */
    AnimalPicture findById(Integer animalpictureId);

	/**
     * Find and return the list of AnimalPictures by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param animalpictureIds The id's of the AnimalPicture to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return AnimalPictures associated with the given animalpictureIds.
     */
    List<AnimalPicture> findByMultipleIds(List<Integer> animalpictureIds, boolean orderedReturn);


    /**
     * Updates the details of an existing AnimalPicture. It replaces all fields of the existing AnimalPicture with the given animalPicture.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AnimalPicture if any.
     *
     * @param animalPicture The details of the AnimalPicture to be updated; value cannot be null.
     * @return The updated AnimalPicture.
     * @throws EntityNotFoundException if no AnimalPicture is found with given input.
     */
    AnimalPicture update(@Valid AnimalPicture animalPicture);


    /**
     * Partially updates the details of an existing AnimalPicture. It updates only the
     * fields of the existing AnimalPicture which are passed in the animalPicturePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on AnimalPicture if any.
     *
     * @param animalpictureId The id of the AnimalPicture to be deleted; value cannot be null.
     * @param animalPicturePatch The partial data of AnimalPicture which is supposed to be updated; value cannot be null.
     * @return The updated AnimalPicture.
     * @throws EntityNotFoundException if no AnimalPicture is found with given input.
     */
    AnimalPicture partialUpdate(Integer animalpictureId, Map<String, Object> animalPicturePatch);

    /**
     * Deletes an existing AnimalPicture with the given id.
     *
     * @param animalpictureId The id of the AnimalPicture to be deleted; value cannot be null.
     * @return The deleted AnimalPicture.
     * @throws EntityNotFoundException if no AnimalPicture found with the given id.
     */
    AnimalPicture delete(Integer animalpictureId);

    /**
     * Deletes an existing AnimalPicture with the given object.
     *
     * @param animalPicture The instance of the AnimalPicture to be deleted; value cannot be null.
     */
    void delete(AnimalPicture animalPicture);

    /**
     * Find all AnimalPictures matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AnimalPictures.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<AnimalPicture> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all AnimalPictures matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching AnimalPictures.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnimalPicture> findAll(String query, Pageable pageable);

    /**
     * Exports all AnimalPictures matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all AnimalPictures matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the AnimalPictures in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the AnimalPicture.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}