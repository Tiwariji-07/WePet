/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.Animal;
import com.wepet.wepet.Complain;
import com.wepet.wepet.Location;
import com.wepet.wepet.Organization;
import com.wepet.wepet.User;

/**
 * Service object for domain model class {@link Location}.
 */
public interface LocationService {

    /**
     * Creates a new Location. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Location if any.
     *
     * @param location Details of the Location to be created; value cannot be null.
     * @return The newly created Location.
     */
    Location create(@Valid Location location);


	/**
     * Returns Location by given id if exists.
     *
     * @param locationId The id of the Location to get; value cannot be null.
     * @return Location associated with the given locationId.
	 * @throws EntityNotFoundException If no Location is found.
     */
    Location getById(Integer locationId);

    /**
     * Find and return the Location by given id if exists, returns null otherwise.
     *
     * @param locationId The id of the Location to get; value cannot be null.
     * @return Location associated with the given locationId.
     */
    Location findById(Integer locationId);

	/**
     * Find and return the list of Locations by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param locationIds The id's of the Location to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Locations associated with the given locationIds.
     */
    List<Location> findByMultipleIds(List<Integer> locationIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Location. It replaces all fields of the existing Location with the given location.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Location if any.
     *
     * @param location The details of the Location to be updated; value cannot be null.
     * @return The updated Location.
     * @throws EntityNotFoundException if no Location is found with given input.
     */
    Location update(@Valid Location location);


    /**
     * Partially updates the details of an existing Location. It updates only the
     * fields of the existing Location which are passed in the locationPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Location if any.
     *
     * @param locationId The id of the Location to be deleted; value cannot be null.
     * @param locationPatch The partial data of Location which is supposed to be updated; value cannot be null.
     * @return The updated Location.
     * @throws EntityNotFoundException if no Location is found with given input.
     */
    Location partialUpdate(Integer locationId, Map<String, Object> locationPatch);

    /**
     * Deletes an existing Location with the given id.
     *
     * @param locationId The id of the Location to be deleted; value cannot be null.
     * @return The deleted Location.
     * @throws EntityNotFoundException if no Location found with the given id.
     */
    Location delete(Integer locationId);

    /**
     * Deletes an existing Location with the given object.
     *
     * @param location The instance of the Location to be deleted; value cannot be null.
     */
    void delete(Location location);

    /**
     * Find all Locations matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Locations.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Location> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Locations matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Locations.
     *
     * @see Pageable
     * @see Page
     */
    Page<Location> findAll(String query, Pageable pageable);

    /**
     * Exports all Locations matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Locations matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Locations in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Location.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated animals for given Location id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Animal instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Animal> findAssociatedAnimals(Integer id, Pageable pageable);

    /*
     * Returns the associated complains for given Location id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Complain instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Complain> findAssociatedComplains(Integer id, Pageable pageable);

    /*
     * Returns the associated organizations for given Location id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Organization instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Organization> findAssociatedOrganizations(Integer id, Pageable pageable);

    /*
     * Returns the associated users for given Location id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated User instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<User> findAssociatedUsers(Integer id, Pageable pageable);

}