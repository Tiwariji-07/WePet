/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.AnimalPicture;


/**
 * ServiceImpl object for domain model class AnimalPicture.
 *
 * @see AnimalPicture
 */
@Service("wepet.AnimalPictureService")
@Validated
@EntityService(entityClass = AnimalPicture.class, serviceId = "wepet")
public class AnimalPictureServiceImpl implements AnimalPictureService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnimalPictureServiceImpl.class);


    @Autowired
    @Qualifier("wepet.AnimalPictureDao")
    private WMGenericDao<AnimalPicture, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AnimalPicture, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public AnimalPicture create(AnimalPicture animalPicture) {
        LOGGER.debug("Creating a new AnimalPicture with information: {}", animalPicture);

        AnimalPicture animalPictureCreated = this.wmGenericDao.create(animalPicture);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(animalPictureCreated);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public AnimalPicture getById(Integer animalpictureId) {
        LOGGER.debug("Finding AnimalPicture by id: {}", animalpictureId);
        return this.wmGenericDao.findById(animalpictureId);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public AnimalPicture findById(Integer animalpictureId) {
        LOGGER.debug("Finding AnimalPicture by id: {}", animalpictureId);
        try {
            return this.wmGenericDao.findById(animalpictureId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AnimalPicture found with id: {}", animalpictureId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public List<AnimalPicture> findByMultipleIds(List<Integer> animalpictureIds, boolean orderedReturn) {
        LOGGER.debug("Finding AnimalPictures by ids: {}", animalpictureIds);

        return this.wmGenericDao.findByMultipleIds(animalpictureIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepetTransactionManager")
    @Override
    public AnimalPicture update(AnimalPicture animalPicture) {
        LOGGER.debug("Updating AnimalPicture with information: {}", animalPicture);

        this.wmGenericDao.update(animalPicture);
        this.wmGenericDao.refresh(animalPicture);

        return animalPicture;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public AnimalPicture partialUpdate(Integer animalpictureId, Map<String, Object>animalPicturePatch) {
        LOGGER.debug("Partially Updating the AnimalPicture with id: {}", animalpictureId);

        AnimalPicture animalPicture = getById(animalpictureId);

        try {
            ObjectReader animalPictureReader = this.objectMapper.reader().forType(AnimalPicture.class).withValueToUpdate(animalPicture);
            animalPicture = animalPictureReader.readValue(this.objectMapper.writeValueAsString(animalPicturePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", animalPicturePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        animalPicture = update(animalPicture);

        return animalPicture;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public AnimalPicture delete(Integer animalpictureId) {
        LOGGER.debug("Deleting AnimalPicture with id: {}", animalpictureId);
        AnimalPicture deleted = this.wmGenericDao.findById(animalpictureId);
        if (deleted == null) {
            LOGGER.debug("No AnimalPicture found with id: {}", animalpictureId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AnimalPicture.class.getSimpleName(), animalpictureId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public void delete(AnimalPicture animalPicture) {
        LOGGER.debug("Deleting AnimalPicture with {}", animalPicture);
        this.wmGenericDao.delete(animalPicture);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<AnimalPicture> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AnimalPictures");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<AnimalPicture> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AnimalPictures");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet for table AnimalPicture to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet for table AnimalPicture to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}