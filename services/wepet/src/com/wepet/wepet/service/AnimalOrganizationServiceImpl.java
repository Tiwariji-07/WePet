/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.Adoption;
import com.wepet.wepet.AnimalOrganization;


/**
 * ServiceImpl object for domain model class AnimalOrganization.
 *
 * @see AnimalOrganization
 */
@Service("wepet.AnimalOrganizationService")
@Validated
@EntityService(entityClass = AnimalOrganization.class, serviceId = "wepet")
public class AnimalOrganizationServiceImpl implements AnimalOrganizationService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnimalOrganizationServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("wepet.AdoptionService")
    private AdoptionService adoptionService;

    @Autowired
    @Qualifier("wepet.AnimalOrganizationDao")
    private WMGenericDao<AnimalOrganization, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<AnimalOrganization, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public AnimalOrganization create(AnimalOrganization animalOrganization) {
        LOGGER.debug("Creating a new AnimalOrganization with information: {}", animalOrganization);

        AnimalOrganization animalOrganizationCreated = this.wmGenericDao.create(animalOrganization);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(animalOrganizationCreated);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public AnimalOrganization getById(Integer animalorganizationId) {
        LOGGER.debug("Finding AnimalOrganization by id: {}", animalorganizationId);
        return this.wmGenericDao.findById(animalorganizationId);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public AnimalOrganization findById(Integer animalorganizationId) {
        LOGGER.debug("Finding AnimalOrganization by id: {}", animalorganizationId);
        try {
            return this.wmGenericDao.findById(animalorganizationId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No AnimalOrganization found with id: {}", animalorganizationId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public List<AnimalOrganization> findByMultipleIds(List<Integer> animalorganizationIds, boolean orderedReturn) {
        LOGGER.debug("Finding AnimalOrganizations by ids: {}", animalorganizationIds);

        return this.wmGenericDao.findByMultipleIds(animalorganizationIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepetTransactionManager")
    @Override
    public AnimalOrganization update(AnimalOrganization animalOrganization) {
        LOGGER.debug("Updating AnimalOrganization with information: {}", animalOrganization);

        this.wmGenericDao.update(animalOrganization);
        this.wmGenericDao.refresh(animalOrganization);

        return animalOrganization;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public AnimalOrganization partialUpdate(Integer animalorganizationId, Map<String, Object>animalOrganizationPatch) {
        LOGGER.debug("Partially Updating the AnimalOrganization with id: {}", animalorganizationId);

        AnimalOrganization animalOrganization = getById(animalorganizationId);

        try {
            ObjectReader animalOrganizationReader = this.objectMapper.reader().forType(AnimalOrganization.class).withValueToUpdate(animalOrganization);
            animalOrganization = animalOrganizationReader.readValue(this.objectMapper.writeValueAsString(animalOrganizationPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", animalOrganizationPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        animalOrganization = update(animalOrganization);

        return animalOrganization;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public AnimalOrganization delete(Integer animalorganizationId) {
        LOGGER.debug("Deleting AnimalOrganization with id: {}", animalorganizationId);
        AnimalOrganization deleted = this.wmGenericDao.findById(animalorganizationId);
        if (deleted == null) {
            LOGGER.debug("No AnimalOrganization found with id: {}", animalorganizationId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), AnimalOrganization.class.getSimpleName(), animalorganizationId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public void delete(AnimalOrganization animalOrganization) {
        LOGGER.debug("Deleting AnimalOrganization with {}", animalOrganization);
        this.wmGenericDao.delete(animalOrganization);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<AnimalOrganization> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AnimalOrganizations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<AnimalOrganization> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AnimalOrganizations");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet for table AnimalOrganization to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet for table AnimalOrganization to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Adoption> findAssociatedAdoptions(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated adoptions");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("animalOrganization.id = '" + id + "'");

        return adoptionService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AdoptionService instance
     */
    protected void setAdoptionService(AdoptionService service) {
        this.adoptionService = service;
    }

}