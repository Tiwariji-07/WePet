/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.Animal;
import com.wepet.wepet.AnimalOrganization;
import com.wepet.wepet.AnimalPicture;

/**
 * Service object for domain model class {@link Animal}.
 */
public interface AnimalService {

    /**
     * Creates a new Animal. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Animal if any.
     *
     * @param animal Details of the Animal to be created; value cannot be null.
     * @return The newly created Animal.
     */
    Animal create(@Valid Animal animal);


	/**
     * Returns Animal by given id if exists.
     *
     * @param animalId The id of the Animal to get; value cannot be null.
     * @return Animal associated with the given animalId.
	 * @throws EntityNotFoundException If no Animal is found.
     */
    Animal getById(Integer animalId);

    /**
     * Find and return the Animal by given id if exists, returns null otherwise.
     *
     * @param animalId The id of the Animal to get; value cannot be null.
     * @return Animal associated with the given animalId.
     */
    Animal findById(Integer animalId);

	/**
     * Find and return the list of Animals by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param animalIds The id's of the Animal to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Animals associated with the given animalIds.
     */
    List<Animal> findByMultipleIds(List<Integer> animalIds, boolean orderedReturn);

    /**
     * Find and return the Animal for given size  if exists.
     *
     * @param size value of size; value cannot be null.
     * @return Animal associated with the given inputs.
     * @throws EntityNotFoundException if no matching Animal found.
     */
    Animal getBySize(String size);

    /**
     * Find and return the Animal for given age  if exists.
     *
     * @param age value of age; value cannot be null.
     * @return Animal associated with the given inputs.
     * @throws EntityNotFoundException if no matching Animal found.
     */
    Animal getByAge(int age);

    /**
     * Updates the details of an existing Animal. It replaces all fields of the existing Animal with the given animal.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Animal if any.
     *
     * @param animal The details of the Animal to be updated; value cannot be null.
     * @return The updated Animal.
     * @throws EntityNotFoundException if no Animal is found with given input.
     */
    Animal update(@Valid Animal animal);


    /**
     * Partially updates the details of an existing Animal. It updates only the
     * fields of the existing Animal which are passed in the animalPatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Animal if any.
     *
     * @param animalId The id of the Animal to be deleted; value cannot be null.
     * @param animalPatch The partial data of Animal which is supposed to be updated; value cannot be null.
     * @return The updated Animal.
     * @throws EntityNotFoundException if no Animal is found with given input.
     */
    Animal partialUpdate(Integer animalId, Map<String, Object> animalPatch);

    /**
     * Deletes an existing Animal with the given id.
     *
     * @param animalId The id of the Animal to be deleted; value cannot be null.
     * @return The deleted Animal.
     * @throws EntityNotFoundException if no Animal found with the given id.
     */
    Animal delete(Integer animalId);

    /**
     * Deletes an existing Animal with the given object.
     *
     * @param animal The instance of the Animal to be deleted; value cannot be null.
     */
    void delete(Animal animal);

    /**
     * Find all Animals matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Animals.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Animal> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Animals matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Animals.
     *
     * @see Pageable
     * @see Page
     */
    Page<Animal> findAll(String query, Pageable pageable);

    /**
     * Exports all Animals matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Animals matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Animals in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Animal.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated animalOrganizations for given Animal id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnimalOrganization instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnimalOrganization> findAssociatedAnimalOrganizations(Integer id, Pageable pageable);

    /*
     * Returns the associated animalPictures for given Animal id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnimalPicture instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnimalPicture> findAssociatedAnimalPictures(Integer id, Pageable pageable);

}