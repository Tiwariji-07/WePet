/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.Adoption;


/**
 * ServiceImpl object for domain model class Adoption.
 *
 * @see Adoption
 */
@Service("wepet.AdoptionService")
@Validated
@EntityService(entityClass = Adoption.class, serviceId = "wepet")
public class AdoptionServiceImpl implements AdoptionService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AdoptionServiceImpl.class);


    @Autowired
    @Qualifier("wepet.AdoptionDao")
    private WMGenericDao<Adoption, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Adoption, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Adoption create(Adoption adoption) {
        LOGGER.debug("Creating a new Adoption with information: {}", adoption);

        Adoption adoptionCreated = this.wmGenericDao.create(adoption);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(adoptionCreated);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Adoption getById(Integer adoptionId) {
        LOGGER.debug("Finding Adoption by id: {}", adoptionId);
        return this.wmGenericDao.findById(adoptionId);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Adoption findById(Integer adoptionId) {
        LOGGER.debug("Finding Adoption by id: {}", adoptionId);
        try {
            return this.wmGenericDao.findById(adoptionId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Adoption found with id: {}", adoptionId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public List<Adoption> findByMultipleIds(List<Integer> adoptionIds, boolean orderedReturn) {
        LOGGER.debug("Finding Adoptions by ids: {}", adoptionIds);

        return this.wmGenericDao.findByMultipleIds(adoptionIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepetTransactionManager")
    @Override
    public Adoption update(Adoption adoption) {
        LOGGER.debug("Updating Adoption with information: {}", adoption);

        this.wmGenericDao.update(adoption);
        this.wmGenericDao.refresh(adoption);

        return adoption;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Adoption partialUpdate(Integer adoptionId, Map<String, Object>adoptionPatch) {
        LOGGER.debug("Partially Updating the Adoption with id: {}", adoptionId);

        Adoption adoption = getById(adoptionId);

        try {
            ObjectReader adoptionReader = this.objectMapper.reader().forType(Adoption.class).withValueToUpdate(adoption);
            adoption = adoptionReader.readValue(this.objectMapper.writeValueAsString(adoptionPatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", adoptionPatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        adoption = update(adoption);

        return adoption;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Adoption delete(Integer adoptionId) {
        LOGGER.debug("Deleting Adoption with id: {}", adoptionId);
        Adoption deleted = this.wmGenericDao.findById(adoptionId);
        if (deleted == null) {
            LOGGER.debug("No Adoption found with id: {}", adoptionId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Adoption.class.getSimpleName(), adoptionId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public void delete(Adoption adoption) {
        LOGGER.debug("Deleting Adoption with {}", adoption);
        this.wmGenericDao.delete(adoption);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Adoption> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Adoptions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Adoption> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Adoptions");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet for table Adoption to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet for table Adoption to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}