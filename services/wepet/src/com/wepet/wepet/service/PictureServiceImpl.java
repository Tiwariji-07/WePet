/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.IOException;
import java.io.OutputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.wavemaker.commons.InvalidInputException;
import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.annotations.EntityService;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.AnimalPicture;
import com.wepet.wepet.Complain;
import com.wepet.wepet.Picture;


/**
 * ServiceImpl object for domain model class Picture.
 *
 * @see Picture
 */
@Service("wepet.PictureService")
@Validated
@EntityService(entityClass = Picture.class, serviceId = "wepet")
public class PictureServiceImpl implements PictureService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PictureServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("wepet.ComplainService")
    private ComplainService complainService;

    @Lazy
    @Autowired
    @Qualifier("wepet.AnimalPictureService")
    private AnimalPictureService animalPictureService;

    @Autowired
    @Qualifier("wepet.PictureDao")
    private WMGenericDao<Picture, Integer> wmGenericDao;

    @Autowired
    @Qualifier("wmAppObjectMapper")
    private ObjectMapper objectMapper;


    public void setWMGenericDao(WMGenericDao<Picture, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Picture create(Picture picture) {
        LOGGER.debug("Creating a new Picture with information: {}", picture);

        Picture pictureCreated = this.wmGenericDao.create(picture);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(pictureCreated);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Picture getById(Integer pictureId) {
        LOGGER.debug("Finding Picture by id: {}", pictureId);
        return this.wmGenericDao.findById(pictureId);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Picture findById(Integer pictureId) {
        LOGGER.debug("Finding Picture by id: {}", pictureId);
        try {
            return this.wmGenericDao.findById(pictureId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Picture found with id: {}", pictureId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public List<Picture> findByMultipleIds(List<Integer> pictureIds, boolean orderedReturn) {
        LOGGER.debug("Finding Pictures by ids: {}", pictureIds);

        return this.wmGenericDao.findByMultipleIds(pictureIds, orderedReturn);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Picture getByImagePath(String imagePath) {
        Map<String, Object> imagePathMap = new HashMap<>();
        imagePathMap.put("imagePath", imagePath);

        LOGGER.debug("Finding Picture by unique keys: {}", imagePathMap);
        return this.wmGenericDao.findByUniqueKey(imagePathMap);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "wepetTransactionManager")
    @Override
    public Picture update(Picture picture) {
        LOGGER.debug("Updating Picture with information: {}", picture);

        this.wmGenericDao.update(picture);
        this.wmGenericDao.refresh(picture);

        return picture;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Picture partialUpdate(Integer pictureId, Map<String, Object>picturePatch) {
        LOGGER.debug("Partially Updating the Picture with id: {}", pictureId);

        Picture picture = getById(pictureId);

        try {
            ObjectReader pictureReader = this.objectMapper.reader().forType(Picture.class).withValueToUpdate(picture);
            picture = pictureReader.readValue(this.objectMapper.writeValueAsString(picturePatch));
        } catch (IOException ex) {
            LOGGER.debug("There was a problem in applying the patch: {}", picturePatch, ex);
            throw new InvalidInputException("Could not apply patch",ex);
        }

        picture = update(picture);

        return picture;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public Picture delete(Integer pictureId) {
        LOGGER.debug("Deleting Picture with id: {}", pictureId);
        Picture deleted = this.wmGenericDao.findById(pictureId);
        if (deleted == null) {
            LOGGER.debug("No Picture found with id: {}", pictureId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Picture.class.getSimpleName(), pictureId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "wepetTransactionManager")
    @Override
    public void delete(Picture picture) {
        LOGGER.debug("Deleting Picture with {}", picture);
        this.wmGenericDao.delete(picture);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Picture> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Pictures");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Picture> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Pictures");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service wepet for table Picture to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service wepet for table Picture to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<AnimalPicture> findAssociatedAnimalPictures(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated animalPictures");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("picture.id = '" + id + "'");

        return animalPictureService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "wepetTransactionManager")
    @Override
    public Page<Complain> findAssociatedComplains(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated complains");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("picture.id = '" + id + "'");

        return complainService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ComplainService instance
     */
    protected void setComplainService(ComplainService service) {
        this.complainService = service;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service AnimalPictureService instance
     */
    protected void setAnimalPictureService(AnimalPictureService service) {
        this.animalPictureService = service;
    }

}