/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;

import com.wepet.wepet.AnimalPicture;
import com.wepet.wepet.Complain;
import com.wepet.wepet.Picture;

/**
 * Service object for domain model class {@link Picture}.
 */
public interface PictureService {

    /**
     * Creates a new Picture. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Picture if any.
     *
     * @param picture Details of the Picture to be created; value cannot be null.
     * @return The newly created Picture.
     */
    Picture create(@Valid Picture picture);


	/**
     * Returns Picture by given id if exists.
     *
     * @param pictureId The id of the Picture to get; value cannot be null.
     * @return Picture associated with the given pictureId.
	 * @throws EntityNotFoundException If no Picture is found.
     */
    Picture getById(Integer pictureId);

    /**
     * Find and return the Picture by given id if exists, returns null otherwise.
     *
     * @param pictureId The id of the Picture to get; value cannot be null.
     * @return Picture associated with the given pictureId.
     */
    Picture findById(Integer pictureId);

	/**
     * Find and return the list of Pictures by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param pictureIds The id's of the Picture to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Pictures associated with the given pictureIds.
     */
    List<Picture> findByMultipleIds(List<Integer> pictureIds, boolean orderedReturn);

    /**
     * Find and return the Picture for given imagePath  if exists.
     *
     * @param imagePath value of imagePath; value cannot be null.
     * @return Picture associated with the given inputs.
     * @throws EntityNotFoundException if no matching Picture found.
     */
    Picture getByImagePath(String imagePath);

    /**
     * Updates the details of an existing Picture. It replaces all fields of the existing Picture with the given picture.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Picture if any.
     *
     * @param picture The details of the Picture to be updated; value cannot be null.
     * @return The updated Picture.
     * @throws EntityNotFoundException if no Picture is found with given input.
     */
    Picture update(@Valid Picture picture);


    /**
     * Partially updates the details of an existing Picture. It updates only the
     * fields of the existing Picture which are passed in the picturePatch.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Picture if any.
     *
     * @param pictureId The id of the Picture to be deleted; value cannot be null.
     * @param picturePatch The partial data of Picture which is supposed to be updated; value cannot be null.
     * @return The updated Picture.
     * @throws EntityNotFoundException if no Picture is found with given input.
     */
    Picture partialUpdate(Integer pictureId, Map<String, Object> picturePatch);

    /**
     * Deletes an existing Picture with the given id.
     *
     * @param pictureId The id of the Picture to be deleted; value cannot be null.
     * @return The deleted Picture.
     * @throws EntityNotFoundException if no Picture found with the given id.
     */
    Picture delete(Integer pictureId);

    /**
     * Deletes an existing Picture with the given object.
     *
     * @param picture The instance of the Picture to be deleted; value cannot be null.
     */
    void delete(Picture picture);

    /**
     * Find all Pictures matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Pictures.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Picture> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Pictures matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Pictures.
     *
     * @see Pageable
     * @see Page
     */
    Page<Picture> findAll(String query, Pageable pageable);

    /**
     * Exports all Pictures matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Pictures matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Pictures in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Picture.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);

    /*
     * Returns the associated animalPictures for given Picture id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated AnimalPicture instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<AnimalPicture> findAssociatedAnimalPictures(Integer id, Pageable pageable);

    /*
     * Returns the associated complains for given Picture id.
     *
     * @param id value of id; value cannot be null
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of associated Complain instances.
     *
     * @see Pageable
     * @see Page
     */
    Page<Complain> findAssociatedComplains(Integer id, Pageable pageable);

}