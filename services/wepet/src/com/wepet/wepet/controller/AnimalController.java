/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wepet.wepet.Animal;
import com.wepet.wepet.AnimalOrganization;
import com.wepet.wepet.AnimalPicture;
import com.wepet.wepet.service.AnimalService;


/**
 * Controller object for domain model class Animal.
 * @see Animal
 */
@RestController("wepet.AnimalController")
@Api(value = "AnimalController", description = "Exposes APIs to work with Animal resource.")
@RequestMapping("/wepet/Animal")
public class AnimalController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnimalController.class);

    @Autowired
	@Qualifier("wepet.AnimalService")
	private AnimalService animalService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Animal instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Animal createAnimal(@RequestBody Animal animal) {
		LOGGER.debug("Create Animal with information: {}" , animal);

		animal = animalService.create(animal);
		LOGGER.debug("Created Animal with information: {}" , animal);

	    return animal;
	}

    @ApiOperation(value = "Returns the Animal instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Animal getAnimal(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Animal with id: {}" , id);

        Animal foundAnimal = animalService.getById(id);
        LOGGER.debug("Animal details with id: {}" , foundAnimal);

        return foundAnimal;
    }

    @ApiOperation(value = "Updates the Animal instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Animal editAnimal(@PathVariable("id") Integer id, @RequestBody Animal animal) {
        LOGGER.debug("Editing Animal with id: {}" , animal.getId());

        animal.setId(id);
        animal = animalService.update(animal);
        LOGGER.debug("Animal details with id: {}" , animal);

        return animal;
    }
    
    @ApiOperation(value = "Partially updates the Animal instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Animal patchAnimal(@PathVariable("id") Integer id, @RequestBody @MapTo(Animal.class) Map<String, Object> animalPatch) {
        LOGGER.debug("Partially updating Animal with id: {}" , id);

        Animal animal = animalService.partialUpdate(id, animalPatch);
        LOGGER.debug("Animal details after partial update: {}" , animal);

        return animal;
    }

    @ApiOperation(value = "Deletes the Animal instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAnimal(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Animal with id: {}" , id);

        Animal deletedAnimal = animalService.delete(id);

        return deletedAnimal != null;
    }

    @GetMapping(value = "/size/{size}" )
    @ApiOperation(value = "Returns the matching Animal with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Animal getBySize(@PathVariable("size") String size) {
        LOGGER.debug("Getting Animal with uniques key Size");
        return animalService.getBySize(size);
    }

    @GetMapping(value = "/age/{age}" )
    @ApiOperation(value = "Returns the matching Animal with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Animal getByAge(@PathVariable("age") int age) {
        LOGGER.debug("Getting Animal with uniques key Age");
        return animalService.getByAge(age);
    }

    /**
     * @deprecated Use {@link #findAnimals(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Animal instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Animal> searchAnimalsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Animals list by query filter:{}", (Object) queryFilters);
        return animalService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Animal instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Animal> findAnimals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Animals list by filter:", query);
        return animalService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Animal instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Animal> filterAnimals(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Animals list by filter", query);
        return animalService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAnimals(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return animalService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAnimalsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Animal.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> animalService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Animal instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAnimals( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Animals");
		return animalService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAnimalAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return animalService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/animalOrganizations")
    @ApiOperation(value = "Gets the animalOrganizations instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalOrganization> findAssociatedAnimalOrganizations(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated animalOrganizations");
        return animalService.findAssociatedAnimalOrganizations(id, pageable);
    }

    @GetMapping(value="/{id:.+}/animalPictures")
    @ApiOperation(value = "Gets the animalPictures instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalPicture> findAssociatedAnimalPictures(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated animalPictures");
        return animalService.findAssociatedAnimalPictures(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AnimalService instance
	 */
	protected void setAnimalService(AnimalService service) {
		this.animalService = service;
	}

}