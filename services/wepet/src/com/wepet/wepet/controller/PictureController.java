/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wepet.wepet.AnimalPicture;
import com.wepet.wepet.Complain;
import com.wepet.wepet.Picture;
import com.wepet.wepet.service.PictureService;


/**
 * Controller object for domain model class Picture.
 * @see Picture
 */
@RestController("wepet.PictureController")
@Api(value = "PictureController", description = "Exposes APIs to work with Picture resource.")
@RequestMapping("/wepet/Picture")
public class PictureController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PictureController.class);

    @Autowired
	@Qualifier("wepet.PictureService")
	private PictureService pictureService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Picture instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Picture createPicture(@RequestBody Picture picture) {
		LOGGER.debug("Create Picture with information: {}" , picture);

		picture = pictureService.create(picture);
		LOGGER.debug("Created Picture with information: {}" , picture);

	    return picture;
	}

    @ApiOperation(value = "Returns the Picture instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Picture getPicture(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Picture with id: {}" , id);

        Picture foundPicture = pictureService.getById(id);
        LOGGER.debug("Picture details with id: {}" , foundPicture);

        return foundPicture;
    }

    @ApiOperation(value = "Updates the Picture instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Picture editPicture(@PathVariable("id") Integer id, @RequestBody Picture picture) {
        LOGGER.debug("Editing Picture with id: {}" , picture.getId());

        picture.setId(id);
        picture = pictureService.update(picture);
        LOGGER.debug("Picture details with id: {}" , picture);

        return picture;
    }
    
    @ApiOperation(value = "Partially updates the Picture instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Picture patchPicture(@PathVariable("id") Integer id, @RequestBody @MapTo(Picture.class) Map<String, Object> picturePatch) {
        LOGGER.debug("Partially updating Picture with id: {}" , id);

        Picture picture = pictureService.partialUpdate(id, picturePatch);
        LOGGER.debug("Picture details after partial update: {}" , picture);

        return picture;
    }

    @ApiOperation(value = "Deletes the Picture instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePicture(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Picture with id: {}" , id);

        Picture deletedPicture = pictureService.delete(id);

        return deletedPicture != null;
    }

    @GetMapping(value = "/imagePath/{imagePath}" )
    @ApiOperation(value = "Returns the matching Picture with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Picture getByImagePath(@PathVariable("imagePath") String imagePath) {
        LOGGER.debug("Getting Picture with uniques key ImagePath");
        return pictureService.getByImagePath(imagePath);
    }

    /**
     * @deprecated Use {@link #findPictures(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Picture instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Picture> searchPicturesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Pictures list by query filter:{}", (Object) queryFilters);
        return pictureService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Picture instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Picture> findPictures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Pictures list by filter:", query);
        return pictureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Picture instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Picture> filterPictures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Pictures list by filter", query);
        return pictureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPictures(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return pictureService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportPicturesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Picture.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> pictureService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Picture instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPictures( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Pictures");
		return pictureService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPictureAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return pictureService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/animalPictures")
    @ApiOperation(value = "Gets the animalPictures instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalPicture> findAssociatedAnimalPictures(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated animalPictures");
        return pictureService.findAssociatedAnimalPictures(id, pageable);
    }

    @GetMapping(value="/{id:.+}/complains")
    @ApiOperation(value = "Gets the complains instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Complain> findAssociatedComplains(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated complains");
        return pictureService.findAssociatedComplains(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PictureService instance
	 */
	protected void setPictureService(PictureService service) {
		this.pictureService = service;
	}

}