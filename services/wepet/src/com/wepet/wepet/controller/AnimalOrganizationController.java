/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wepet.wepet.Adoption;
import com.wepet.wepet.AnimalOrganization;
import com.wepet.wepet.service.AnimalOrganizationService;


/**
 * Controller object for domain model class AnimalOrganization.
 * @see AnimalOrganization
 */
@RestController("wepet.AnimalOrganizationController")
@Api(value = "AnimalOrganizationController", description = "Exposes APIs to work with AnimalOrganization resource.")
@RequestMapping("/wepet/AnimalOrganization")
public class AnimalOrganizationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnimalOrganizationController.class);

    @Autowired
	@Qualifier("wepet.AnimalOrganizationService")
	private AnimalOrganizationService animalOrganizationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AnimalOrganization instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnimalOrganization createAnimalOrganization(@RequestBody AnimalOrganization animalOrganization) {
		LOGGER.debug("Create AnimalOrganization with information: {}" , animalOrganization);

		animalOrganization = animalOrganizationService.create(animalOrganization);
		LOGGER.debug("Created AnimalOrganization with information: {}" , animalOrganization);

	    return animalOrganization;
	}

    @ApiOperation(value = "Returns the AnimalOrganization instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnimalOrganization getAnimalOrganization(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AnimalOrganization with id: {}" , id);

        AnimalOrganization foundAnimalOrganization = animalOrganizationService.getById(id);
        LOGGER.debug("AnimalOrganization details with id: {}" , foundAnimalOrganization);

        return foundAnimalOrganization;
    }

    @ApiOperation(value = "Updates the AnimalOrganization instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnimalOrganization editAnimalOrganization(@PathVariable("id") Integer id, @RequestBody AnimalOrganization animalOrganization) {
        LOGGER.debug("Editing AnimalOrganization with id: {}" , animalOrganization.getId());

        animalOrganization.setId(id);
        animalOrganization = animalOrganizationService.update(animalOrganization);
        LOGGER.debug("AnimalOrganization details with id: {}" , animalOrganization);

        return animalOrganization;
    }
    
    @ApiOperation(value = "Partially updates the AnimalOrganization instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnimalOrganization patchAnimalOrganization(@PathVariable("id") Integer id, @RequestBody @MapTo(AnimalOrganization.class) Map<String, Object> animalOrganizationPatch) {
        LOGGER.debug("Partially updating AnimalOrganization with id: {}" , id);

        AnimalOrganization animalOrganization = animalOrganizationService.partialUpdate(id, animalOrganizationPatch);
        LOGGER.debug("AnimalOrganization details after partial update: {}" , animalOrganization);

        return animalOrganization;
    }

    @ApiOperation(value = "Deletes the AnimalOrganization instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAnimalOrganization(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AnimalOrganization with id: {}" , id);

        AnimalOrganization deletedAnimalOrganization = animalOrganizationService.delete(id);

        return deletedAnimalOrganization != null;
    }

    /**
     * @deprecated Use {@link #findAnimalOrganizations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AnimalOrganization instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalOrganization> searchAnimalOrganizationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AnimalOrganizations list by query filter:{}", (Object) queryFilters);
        return animalOrganizationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AnimalOrganization instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalOrganization> findAnimalOrganizations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AnimalOrganizations list by filter:", query);
        return animalOrganizationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AnimalOrganization instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalOrganization> filterAnimalOrganizations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AnimalOrganizations list by filter", query);
        return animalOrganizationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAnimalOrganizations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return animalOrganizationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAnimalOrganizationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AnimalOrganization.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> animalOrganizationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AnimalOrganization instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAnimalOrganizations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AnimalOrganizations");
		return animalOrganizationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAnimalOrganizationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return animalOrganizationService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/adoptions")
    @ApiOperation(value = "Gets the adoptions instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Adoption> findAssociatedAdoptions(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated adoptions");
        return animalOrganizationService.findAssociatedAdoptions(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AnimalOrganizationService instance
	 */
	protected void setAnimalOrganizationService(AnimalOrganizationService service) {
		this.animalOrganizationService = service;
	}

}