/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wepet.wepet.AnimalPicture;
import com.wepet.wepet.service.AnimalPictureService;


/**
 * Controller object for domain model class AnimalPicture.
 * @see AnimalPicture
 */
@RestController("wepet.AnimalPictureController")
@Api(value = "AnimalPictureController", description = "Exposes APIs to work with AnimalPicture resource.")
@RequestMapping("/wepet/AnimalPicture")
public class AnimalPictureController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AnimalPictureController.class);

    @Autowired
	@Qualifier("wepet.AnimalPictureService")
	private AnimalPictureService animalPictureService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new AnimalPicture instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnimalPicture createAnimalPicture(@RequestBody AnimalPicture animalPicture) {
		LOGGER.debug("Create AnimalPicture with information: {}" , animalPicture);

		animalPicture = animalPictureService.create(animalPicture);
		LOGGER.debug("Created AnimalPicture with information: {}" , animalPicture);

	    return animalPicture;
	}

    @ApiOperation(value = "Returns the AnimalPicture instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnimalPicture getAnimalPicture(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting AnimalPicture with id: {}" , id);

        AnimalPicture foundAnimalPicture = animalPictureService.getById(id);
        LOGGER.debug("AnimalPicture details with id: {}" , foundAnimalPicture);

        return foundAnimalPicture;
    }

    @ApiOperation(value = "Updates the AnimalPicture instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnimalPicture editAnimalPicture(@PathVariable("id") Integer id, @RequestBody AnimalPicture animalPicture) {
        LOGGER.debug("Editing AnimalPicture with id: {}" , animalPicture.getId());

        animalPicture.setId(id);
        animalPicture = animalPictureService.update(animalPicture);
        LOGGER.debug("AnimalPicture details with id: {}" , animalPicture);

        return animalPicture;
    }
    
    @ApiOperation(value = "Partially updates the AnimalPicture instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AnimalPicture patchAnimalPicture(@PathVariable("id") Integer id, @RequestBody @MapTo(AnimalPicture.class) Map<String, Object> animalPicturePatch) {
        LOGGER.debug("Partially updating AnimalPicture with id: {}" , id);

        AnimalPicture animalPicture = animalPictureService.partialUpdate(id, animalPicturePatch);
        LOGGER.debug("AnimalPicture details after partial update: {}" , animalPicture);

        return animalPicture;
    }

    @ApiOperation(value = "Deletes the AnimalPicture instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAnimalPicture(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting AnimalPicture with id: {}" , id);

        AnimalPicture deletedAnimalPicture = animalPictureService.delete(id);

        return deletedAnimalPicture != null;
    }

    /**
     * @deprecated Use {@link #findAnimalPictures(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AnimalPicture instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalPicture> searchAnimalPicturesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AnimalPictures list by query filter:{}", (Object) queryFilters);
        return animalPictureService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AnimalPicture instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalPicture> findAnimalPictures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AnimalPictures list by filter:", query);
        return animalPictureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AnimalPicture instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AnimalPicture> filterAnimalPictures(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AnimalPictures list by filter", query);
        return animalPictureService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAnimalPictures(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return animalPictureService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportAnimalPicturesAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = AnimalPicture.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> animalPictureService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of AnimalPicture instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAnimalPictures( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AnimalPictures");
		return animalPictureService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAnimalPictureAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return animalPictureService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AnimalPictureService instance
	 */
	protected void setAnimalPictureService(AnimalPictureService service) {
		this.animalPictureService = service;
	}

}