/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.commons.file.manager.ExportedFileManager;
import com.wavemaker.runtime.commons.file.model.Downloadable;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.tools.api.core.annotations.MapTo;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.wepet.wepet.Animal;
import com.wepet.wepet.Complain;
import com.wepet.wepet.Location;
import com.wepet.wepet.Organization;
import com.wepet.wepet.User;
import com.wepet.wepet.service.LocationService;


/**
 * Controller object for domain model class Location.
 * @see Location
 */
@RestController("wepet.LocationController")
@Api(value = "LocationController", description = "Exposes APIs to work with Location resource.")
@RequestMapping("/wepet/Location")
public class LocationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LocationController.class);

    @Autowired
	@Qualifier("wepet.LocationService")
	private LocationService locationService;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Location instance.")
    @PostMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Location createLocation(@RequestBody Location location) {
		LOGGER.debug("Create Location with information: {}" , location);

		location = locationService.create(location);
		LOGGER.debug("Created Location with information: {}" , location);

	    return location;
	}

    @ApiOperation(value = "Returns the Location instance associated with the given id.")
    @GetMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Location getLocation(@PathVariable("id") Integer id) {
        LOGGER.debug("Getting Location with id: {}" , id);

        Location foundLocation = locationService.getById(id);
        LOGGER.debug("Location details with id: {}" , foundLocation);

        return foundLocation;
    }

    @ApiOperation(value = "Updates the Location instance associated with the given id.")
    @PutMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Location editLocation(@PathVariable("id") Integer id, @RequestBody Location location) {
        LOGGER.debug("Editing Location with id: {}" , location.getId());

        location.setId(id);
        location = locationService.update(location);
        LOGGER.debug("Location details with id: {}" , location);

        return location;
    }
    
    @ApiOperation(value = "Partially updates the Location instance associated with the given id.")
    @PatchMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Location patchLocation(@PathVariable("id") Integer id, @RequestBody @MapTo(Location.class) Map<String, Object> locationPatch) {
        LOGGER.debug("Partially updating Location with id: {}" , id);

        Location location = locationService.partialUpdate(id, locationPatch);
        LOGGER.debug("Location details after partial update: {}" , location);

        return location;
    }

    @ApiOperation(value = "Deletes the Location instance associated with the given id.")
    @DeleteMapping(value = "/{id:.+}")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteLocation(@PathVariable("id") Integer id) {
        LOGGER.debug("Deleting Location with id: {}" , id);

        Location deletedLocation = locationService.delete(id);

        return deletedLocation != null;
    }

    /**
     * @deprecated Use {@link #findLocations(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Location instances matching the search criteria.")
    @PostMapping(value = "/search")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Location> searchLocationsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Locations list by query filter:{}", (Object) queryFilters);
        return locationService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Location instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @GetMapping
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Location> findLocations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Locations list by filter:", query);
        return locationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Location instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @PostMapping(value="/filter", consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Location> filterLocations(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Locations list by filter", query);
        return locationService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param.")
    @GetMapping(value = "/export/{exportType}", produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportLocations(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return locationService.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @PostMapping(value = "/export", consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportLocationsAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Location.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> locationService.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Location instances matching the optional query (q) request param.")
	@GetMapping(value = "/count")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countLocations( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Locations");
		return locationService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@PostMapping(value = "/aggregations")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getLocationAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return locationService.getAggregatedValues(aggregationInfo, pageable);
    }

    @GetMapping(value="/{id:.+}/animals")
    @ApiOperation(value = "Gets the animals instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Animal> findAssociatedAnimals(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated animals");
        return locationService.findAssociatedAnimals(id, pageable);
    }

    @GetMapping(value="/{id:.+}/complains")
    @ApiOperation(value = "Gets the complains instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Complain> findAssociatedComplains(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated complains");
        return locationService.findAssociatedComplains(id, pageable);
    }

    @GetMapping(value="/{id:.+}/organizations")
    @ApiOperation(value = "Gets the organizations instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Organization> findAssociatedOrganizations(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated organizations");
        return locationService.findAssociatedOrganizations(id, pageable);
    }

    @GetMapping(value="/{id:.+}/users")
    @ApiOperation(value = "Gets the users instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<User> findAssociatedUsers(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated users");
        return locationService.findAssociatedUsers(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LocationService instance
	 */
	protected void setLocationService(LocationService service) {
		this.locationService = service;
	}

}