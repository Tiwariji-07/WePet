/*Copyright (c) 2023-2024 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.wepet.wepet;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 * AnimalPicture generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`animal_picture`")
public class AnimalPicture implements Serializable {

    private Integer id;
    private int animalId;
    private int pictureId;
    private Animal animal;
    private Picture picture;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`animal_id`", nullable = false, scale = 0, precision = 10)
    public int getAnimalId() {
        return this.animalId;
    }

    public void setAnimalId(int animalId) {
        this.animalId = animalId;
    }

    @Column(name = "`picture_id`", nullable = false, scale = 0, precision = 10)
    public int getPictureId() {
        return this.pictureId;
    }

    public void setPictureId(int pictureId) {
        this.pictureId = pictureId;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`animal_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`animal_picture_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Animal getAnimal() {
        return this.animal;
    }

    public void setAnimal(Animal animal) {
        if(animal != null) {
            this.animalId = animal.getId();
        }

        this.animal = animal;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`picture_id`", referencedColumnName = "`id`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`animal_picture_ibfk_2`"))
    @Fetch(FetchMode.JOIN)
    public Picture getPicture() {
        return this.picture;
    }

    public void setPicture(Picture picture) {
        if(picture != null) {
            this.pictureId = picture.getId();
        }

        this.picture = picture;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof AnimalPicture)) return false;
        final AnimalPicture animalPicture = (AnimalPicture) o;
        return Objects.equals(getId(), animalPicture.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}